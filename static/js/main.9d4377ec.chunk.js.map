{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["logScale","value","min","minP","maxP","minV","Math","maxV","scale","result","console","inverseLogScale","lg","getMin","type","RangeSliderTypes","getMax","getValue","max","toDecimalPlaces","base","pow","handleChange","e","setValue","Number","handleBlur","RangeSlider","showTab","step","decimalPlaces","rest","className","styles","React","onChange","onBlur","App","useState","linearValue","setLinearValue","logValue","setLogValue","bc_lighterGrey","columnClass","col6","readOnly","LOG","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d4377ec.chunk.js","sourcesContent":["import * as React from 'react'\nimport { ChangeEvent, FC, FocusEvent } from 'react'\nimport styles from './styles.module.css'\n\nexport const logScale = (value: number, max: number, min: number = 1): number => {\n  if(value === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n\n  const result = Math.exp(minV + scale * (value - minP))\n  console.log('log', value, max, min, minV, maxV, scale)\n  console.log('log', result)\n  return result\n}\n\nexport const inverseLogScale = (lg: number, max: number, min: number = 1): number => {\n  if(lg === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n  const result = (Math.log(lg) - minV) / scale + minP\n  console.log('inverse', lg, max, min, minV, maxV, scale)\n  console.log('inverse', result)\n  return result\n}\n\nconst getMin = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 0\n  }\n}\n\nconst getMax = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 1000\n  }\n}\n\nconst getValue = (type: RangeSliderTypes, value: number, max: number, min: number = 0): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return inverseLogScale(value, max, min)\n  }\n}\n\nconst toDecimalPlaces = (value: number, decimalPlaces: number, base = 10): number => {\n  const pow = Math.pow(base||10, decimalPlaces);\n  return Math.round(value*pow) / pow;\n}\n\nexport enum RangeSliderTypes {\n  LOG,\n  LINEAR\n}\n\ninterface Props {\n  step?: number,\n  min?: number,\n  max?: number,\n  value?: number,\n  type?: RangeSliderTypes,\n  showTab?: boolean,\n  decimalPlaces?: number\n  setValue: (value: number) => void,\n}\n\nconst handleChange = (type: RangeSliderTypes, setValue: (value: number) => void, decimalPlaces: number, max: number, min: number) => (e: ChangeEvent<HTMLInputElement>) => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      setValue(toDecimalPlaces(Number(e.target.value), decimalPlaces))\n      break\n    case RangeSliderTypes.LOG:\n      setValue(toDecimalPlaces(logScale(Number(e.target.value), max, min), decimalPlaces))\n      break\n  }\n}\n\nconst handleBlur = (type: RangeSliderTypes, setValue: (value: number) => void, max: number, min: number, decimalPlaces: number) => (e: FocusEvent<HTMLInputElement>) => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      setValue(Number(e.target.value))\n      break\n    case RangeSliderTypes.LOG:\n      setValue(toDecimalPlaces(logScale(Number(e.target.value), max, min), decimalPlaces))\n      break\n  }\n}\n\nexport const RangeSlider: FC<Props> = (\n  {\n    setValue,\n    type = RangeSliderTypes.LINEAR,\n    showTab = true,\n    step = 1,\n    min = 0,\n    max = 100,\n    value = 0,\n    decimalPlaces = 3,\n    ...rest\n  }) => {\n  return (\n    <div className={styles.rangeSlider_wrapper}>\n      {showTab && <span className={styles.rangeSlider_tab}/>}\n      <input\n        type=\"range\"\n        className={styles.rangeSlider}\n        onChange={handleChange(type, setValue, decimalPlaces, max, min)}\n        onBlur={handleBlur(type, setValue, max, min, decimalPlaces)}\n        value={getValue(type, value, max, min).toFixed(decimalPlaces)}\n        min={getMin(type, min)}\n        max={getMax(type, max)}\n        {...rest}\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { RangeSlider, RangeSliderTypes } from 'orderandchaos-react-range-slider'\nimport 'orderandchaos-react-range-slider/dist/index.css'\nimport { ContainerFullWidth, Row, Column, styles } from '@orderandchaos/react-components-typescript'\n\nconst App = () => {\n  const [linearValue, setLinearValue] = useState<number>(0)\n  const [logValue, setLogValue] = useState<number>(100)\n  return (\n    <ContainerFullWidth className={styles.bc_lighterGrey}>\n      <Row>\n        <Column columnClass={styles.col6}>\n          <input readOnly={true} value={linearValue}/>\n          <RangeSlider value={linearValue} setValue={setLinearValue} min={0} max={100} step={1}/>\n        </Column>\n        <Column columnClass={styles.col6}>\n          <input readOnly={true} value={logValue}/>\n          <RangeSlider value={logValue} setValue={setLogValue} type={RangeSliderTypes.LOG} min={100} max={100000} decimalPlaces={0}/>\n        </Column>\n      </Row>\n    </ContainerFullWidth>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}