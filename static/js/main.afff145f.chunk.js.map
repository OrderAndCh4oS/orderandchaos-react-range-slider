{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["getMin","type","RangeSliderTypes","getMax","getValue","min","lg","minV","Math","scale","inverseLogScale","value","max","toDecimalPlaces","base","pow","getActualValue","Number","logScale","handleChange","setValue","e","handleBlur","RangeSlider","LINEAR","showTabTop","showTabBottom","step","decimalPlaces","rest","useState","left","setLeft","containerRef","useRef","useEffect","className","styles","rangeSlider_wrapper","ref","style","rangeSlider","onChange","onBlur","rangeSlider_tab","App","linearValue","setLinearValue","logValue","setLogValue","bc_lighterGrey","columnClass","col6","readOnly","LOG","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afff145f.chunk.js","sourcesContent":["import * as React from 'react'\nimport { ChangeEvent, FC, FocusEvent, useEffect, useRef, useState } from 'react'\nimport styles from './styles.module.css'\n\nexport const logScale = (value: number, max: number, min: number = 1): number => {\n  if(value === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n\n  const result = Math.exp(minV + scale * (value - minP))\n  return result\n}\n\nexport const inverseLogScale = (lg: number, max: number, min: number = 1): number => {\n  if(lg === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n  const result = (Math.log(lg) - minV) / scale + minP\n  return result\n}\n\nconst getMin = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 0\n  }\n}\n\nconst getMax = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 1000\n  }\n}\n\nconst getValue = (type: RangeSliderTypes, value: number, max: number, min: number = 0): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return inverseLogScale(value, max, min)\n  }\n}\n\nconst toDecimalPlaces = (value: number, decimalPlaces: number, base = 10): number => {\n  const pow = Math.pow(base||10, decimalPlaces);\n  return Math.round(value*pow) / pow;\n}\n\nexport enum RangeSliderTypes {\n  LOG,\n  LINEAR\n}\n\ninterface Props {\n  step?: number,\n  min?: number,\n  max?: number,\n  value?: number,\n  type?: RangeSliderTypes,\n  showTabTop?: boolean,\n  showTabBottom?: boolean,\n  decimalPlaces?: number\n  setValue: (value: number) => void,\n}\n\nconst getActualValue = (value: string | number, type: RangeSliderTypes, max: number, min: number, decimalPlaces: number) => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return toDecimalPlaces(Number(value), decimalPlaces)\n    case RangeSliderTypes.LOG:\n      return toDecimalPlaces(logScale(Number(value), max, min), decimalPlaces)\n  }\n}\n\nconst handleChange = (type: RangeSliderTypes, setValue: (value: number) => void, decimalPlaces: number, max: number, min: number) => (e: ChangeEvent<HTMLInputElement>) => {\n  setValue(getActualValue(e.target.value, type, max, min, decimalPlaces));\n}\n\nconst handleBlur = (type: RangeSliderTypes, setValue: (value: number) => void, max: number, min: number, decimalPlaces: number) => (e: FocusEvent<HTMLInputElement>) => {\n  setValue(getActualValue(e.target.value, type, max, min, decimalPlaces));\n}\n\nexport const RangeSlider: FC<Props> = (\n  {\n    setValue,\n    type = RangeSliderTypes.LINEAR,\n    showTabTop = false,\n    showTabBottom = false,\n    step = 1,\n    min = 0,\n    max = 100,\n    value = 0,\n    decimalPlaces = 3,\n    ...rest\n  }) => {\n  const [left, setLeft] = useState<number | null>(null);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if(!showTabTop && !showTabBottom) return;\n    if(!containerRef || containerRef.current === null) return;\n    setLeft(((getValue(type, value, max, min) / getMax(type, max)) * (containerRef.current.clientWidth - 8)) + 4)\n  }, [value, containerRef]);\n  return (\n    <div className={styles.rangeSlider_wrapper} ref={containerRef}>\n      {showTabTop && <span\n        className={[styles.rangeSlider_tab, styles.rangeSlider_tabTop].join(' ')}\n        style={{left: `${left}px`}}\n      >{value}</span>}\n      <input\n        type=\"range\"\n        className={styles.rangeSlider}\n        onChange={handleChange(type, setValue, decimalPlaces, max, min)}\n        onBlur={handleBlur(type, setValue, max, min, decimalPlaces)}\n        value={getValue(type, value, max, min).toFixed(decimalPlaces)}\n        min={getMin(type, min)}\n        max={getMax(type, max)}\n        step={step}\n        {...rest}\n      />\n      {showTabBottom && <span\n        className={styles.rangeSlider_tab}\n        style={{left: `${left}px`}}\n      >{value}</span>}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { RangeSlider, RangeSliderTypes } from 'orderandchaos-react-range-slider'\nimport 'orderandchaos-react-range-slider/dist/index.css'\nimport { ContainerFullWidth, Row, Column, styles } from '@orderandchaos/react-components-typescript'\n\nconst App = () => {\n  const [linearValue, setLinearValue] = useState<number>(0)\n  const [logValue, setLogValue] = useState<number>(100)\n  return (\n    <ContainerFullWidth className={styles.bc_lighterGrey}>\n      <Row>\n        <Column columnClass={styles.col6}>\n          <input readOnly={true} value={linearValue}/>\n          <RangeSlider value={linearValue} setValue={setLinearValue} min={0} max={100} step={0.1} showTabBottom={true}/>\n        </Column>\n        <Column columnClass={styles.col6}>\n          <input readOnly={true} value={logValue}/>\n          <RangeSlider value={logValue} setValue={setLogValue} type={RangeSliderTypes.LOG} min={100} max={100000} decimalPlaces={0} showTabBottom={true}/>\n        </Column>\n      </Row>\n    </ContainerFullWidth>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}