{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["logScale","value","min","minV","Math","maxV","scale","result","console","getMin","type","RangeSliderTypes","getMax","getValue","lg","inverseLogScale","max","toDecimalPlaces","base","pow","handleChange","setValue","Number","e","handleBlur","RangeSlider","LINEAR","showTab","decimalPlaces","rest","className","styles","React","onChange","onBlur","App","useState","linearValue","setLinearValue","logValue","setLogValue","readOnly","step","LOG","ReactDOM","render","document","getElementById"],"mappings":"iTAqEA,E,iCAjEaA,EAAW,SAACC,EAAD,KACtB,QADmDC,UAAc,GACjE,IAAGD,EAAa,OAAOC,EAEvB,IAGMC,EAAOC,SAAb,GACMC,EAAOD,SAAb,GAEME,GAASD,EAAD,OAERE,EAASH,SAASD,EAAOG,GAASL,EARxC,IAWA,OAFAO,+BACAA,qBACA,GAmBIC,EAAS,SAACC,EAAD,GACb,UACE,KAAKC,EAAL,OACE,SACF,KAAKA,EAAL,IACE,WAIAC,EAAS,SAACF,EAAD,GACb,UACE,KAAKC,EAAL,OACE,SACF,KAAKA,EAAL,IACE,aAIAE,EAAW,SAACH,EAAD,OACf,YADoER,UAAc,GAClF,GACE,KAAKS,EAAL,OACE,SACF,KAAKA,EAAL,IACE,OAvCyB,SAACG,EAAD,KAC7B,QADuDZ,UAAc,GACrE,IAAGY,EAAU,OAAOZ,EAEpB,IAGMC,EAAOC,SAAb,GACMC,EAAOD,SAAb,GAEME,GAASD,EAAD,OACRE,GAAUH,YAAD,KAPf,EAUA,OAFAI,mCACAA,yBACA,EA0BWO,CAAgBd,EAAOe,EAA9B,KAIAC,EAAkB,SAAChB,EAAD,UAAuCiB,UAAO,IACpE,IAAMC,EAAMf,SAASc,GAATd,GAAZ,GACA,OAAOA,WAAWH,EAAXG,GAAP,IAGF,SAAYO,GACVA,iBACAA,uBAFF,CAAYA,MAAZ,KAgBA,IAAMS,EAAe,SAACV,EAAD,gBAAgH,YACnI,UACE,KAAKC,EAAL,OACEU,EAASJ,EAAgBK,OAAOC,SAAR,OAAxBF,IACA,MACF,KAAKV,EAAL,IACEU,EAASJ,EAAgBjB,EAASsB,OAAOC,SAAR,SAAT,GAAxBF,OAKAG,EAAa,SAACd,EAAD,gBAAgH,YACjI,UACE,KAAKC,EAAL,OACEU,EAASC,OAAOC,SAAhBF,QACA,MACF,KAAKV,EAAL,IACEU,EAASJ,EAAgBjB,EAASsB,OAAOC,SAAR,SAAT,GAAxBF,OAKOI,EAAyB,SAAC,G,IAEnCJ,a,IACAX,gBAAOA,EAAAC,EAAiBe,S,IACxBC,mBAAUA,GAAA,E,IAEVzB,eAAMA,EAAA,I,IACNc,eAAMA,EAAA,M,IACNf,iBAAQA,EAAA,I,IACR2B,yBAAgBA,EAAA,IACbC,E,oIAAAA,6EAEL,OACE,+BAAKC,UAAWC,GACbJ,GAAW,gCAAMG,UAAWC,IAC7BC,+CACEtB,KAAK,QACLoB,UAAWC,EACXE,SAAUb,EAAaV,EAAMW,EAAUO,EAAeZ,EAAKd,GAC3DgC,OAAQV,EAAWd,EAAMW,EAAUL,EAAKd,EAAK0B,GAC7C3B,MAAOY,EAASH,EAAMT,EAAOe,EAAtBH,cACPX,IAAKO,EAAOC,EAAMR,GAClBc,IAAKJ,EAAOF,EAAMM,IAVxB,MCrGamB,G,MAbH,WAAO,IAAD,EACsBC,mBAAiB,GADvC,mBACTC,EADS,KACIC,EADJ,OAEgBF,mBAAiB,KAFjC,mBAETG,EAFS,KAECC,EAFD,KAGhB,OACE,oCACE,2BAAOC,UAAU,EAAMxC,MAAOoC,IAC9B,kBAAC,EAAD,CAAapC,MAAOoC,EAAahB,SAAUiB,EAAgBpC,IAAK,EAAGc,IAAK,IAAK0B,KAAM,IACnF,2BAAOD,UAAU,EAAMxC,MAAOsC,IAC9B,kBAAC,EAAD,CAAatC,MAAOsC,EAAUlB,SAAUmB,EAAa9B,KAAMC,EAAiBgC,IAAKzC,IAAK,IAAKc,IAAK,IAAQY,cAAe,OCP7HgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f14df6cd.chunk.js","sourcesContent":["import * as React from 'react'\nimport { ChangeEvent, FC, FocusEvent } from 'react'\nimport styles from './styles.module.css'\n\nexport const logScale = (value: number, max: number, min: number = 1): number => {\n  if(value === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n\n  const result = Math.exp(minV + scale * (value - minP))\n  console.log('log', value, max, min, minV, maxV, scale)\n  console.log('log', result)\n  return result\n}\n\nexport const inverseLogScale = (lg: number, max: number, min: number = 1): number => {\n  if(lg === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n  const result = (Math.log(lg) - minV) / scale + minP\n  console.log('inverse', lg, max, min, minV, maxV, scale)\n  console.log('inverse', result)\n  return result\n}\n\nconst getMin = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 0\n  }\n}\n\nconst getMax = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 1000\n  }\n}\n\nconst getValue = (type: RangeSliderTypes, value: number, max: number, min: number = 0): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return inverseLogScale(value, max, min)\n  }\n}\n\nconst toDecimalPlaces = (value: number, decimalPlaces: number, base = 10): number => {\n  const pow = Math.pow(base||10, decimalPlaces);\n  return Math.round(value*pow) / pow;\n}\n\nexport enum RangeSliderTypes {\n  LOG,\n  LINEAR\n}\n\ninterface Props {\n  step?: number,\n  min?: number,\n  max?: number,\n  value?: number,\n  type?: RangeSliderTypes,\n  showTab?: boolean,\n  decimalPlaces?: number\n  setValue: (value: number) => void,\n}\n\nconst handleChange = (type: RangeSliderTypes, setValue: (value: number) => void, decimalPlaces: number, max: number, min: number) => (e: ChangeEvent<HTMLInputElement>) => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      setValue(toDecimalPlaces(Number(e.target.value), decimalPlaces))\n      break\n    case RangeSliderTypes.LOG:\n      setValue(toDecimalPlaces(logScale(Number(e.target.value), max, min), decimalPlaces))\n      break\n  }\n}\n\nconst handleBlur = (type: RangeSliderTypes, setValue: (value: number) => void, max: number, min: number, decimalPlaces: number) => (e: FocusEvent<HTMLInputElement>) => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      setValue(Number(e.target.value))\n      break\n    case RangeSliderTypes.LOG:\n      setValue(toDecimalPlaces(logScale(Number(e.target.value), max, min), decimalPlaces))\n      break\n  }\n}\n\nexport const RangeSlider: FC<Props> = (\n  {\n    setValue,\n    type = RangeSliderTypes.LINEAR,\n    showTab = true,\n    step = 1,\n    min = 0,\n    max = 100,\n    value = 0,\n    decimalPlaces = 3,\n    ...rest\n  }) => {\n  return (\n    <div className={styles.rangeSlider_wrapper}>\n      {showTab && <span className={styles.rangeSlider_tab}/>}\n      <input\n        type=\"range\"\n        className={styles.rangeSlider}\n        onChange={handleChange(type, setValue, decimalPlaces, max, min)}\n        onBlur={handleBlur(type, setValue, max, min, decimalPlaces)}\n        value={getValue(type, value, max, min).toFixed(decimalPlaces)}\n        min={getMin(type, min)}\n        max={getMax(type, max)}\n        {...rest}\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { RangeSlider, RangeSliderTypes } from 'orderandchaos-react-range-slider'\nimport 'orderandchaos-react-range-slider/dist/index.css'\n\nconst App = () => {\n  const [linearValue, setLinearValue] = useState<number>(0)\n  const [logValue, setLogValue] = useState<number>(100)\n  return (\n    <>\n      <input readOnly={true} value={linearValue}/>\n      <RangeSlider value={linearValue} setValue={setLinearValue} min={0} max={100} step={1}/>\n      <input readOnly={true} value={logValue}/>\n      <RangeSlider value={logValue} setValue={setLogValue} type={RangeSliderTypes.LOG} min={100} max={100000} decimalPlaces={0}/>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}