{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["inverseLogScale","lg","min","minP","maxP","minV","Math","maxV","scale","result","getMin","type","RangeSliderTypes","getMax","getValue","value","max","toDecimalPlaces","base","pow","getActualValue","Number","logScale","handleChange","e","setValue","handleBlur","RangeSlider","showTabTop","showTabBottom","step","decimalPlaces","rest","useState","containerRef","useRef","useEffect","normalisedValue","console","setLeft","className","styles","rangeSlider_wrapper","ref","style","left","rangeSlider","onChange","onBlur","rangeSlider_tab","App","linearValue","setLinearValue","logValue","setLogValue","bc_lighterGrey","columnClass","col6","readOnly","LOG","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6bb7f94e.chunk.js","sourcesContent":["import * as React from 'react'\nimport { ChangeEvent, FC, FocusEvent, useEffect, useRef, useState } from 'react'\nimport styles from './styles.module.css'\n\nexport const logScale = (value: number, max: number, min: number = 1): number => {\n  if(value === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n\n  const result = Math.exp(minV + scale * (value - minP))\n  return result\n}\n\nexport const inverseLogScale = (lg: number, max: number, min: number = 1): number => {\n  if(lg === 0) return min;\n\n  const minP = 1\n  const maxP = 1000\n\n  const minV = Math.log(min)\n  const maxV = Math.log(max)\n\n  const scale = (maxV - minV) / (maxP - minP)\n  const result = (Math.log(lg) - minV) / scale + minP\n  return result\n}\n\nconst getMin = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 0\n  }\n}\n\nconst getMax = (type: RangeSliderTypes, value: number): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return 1000\n  }\n}\n\nconst getValue = (type: RangeSliderTypes, value: number, max: number, min: number = 0): number => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return value\n    case RangeSliderTypes.LOG:\n      return inverseLogScale(value, max, min)\n  }\n}\n\nconst toDecimalPlaces = (value: number, decimalPlaces: number, base = 10): number => {\n  const pow = Math.pow(base||10, decimalPlaces);\n  return Math.round(value*pow) / pow;\n}\n\nexport enum RangeSliderTypes {\n  LOG,\n  LINEAR\n}\n\ninterface Props {\n  step?: number,\n  min?: number,\n  max?: number,\n  value?: number,\n  type?: RangeSliderTypes,\n  showTabTop?: boolean,\n  showTabBottom?: boolean,\n  decimalPlaces?: number\n  setValue: (value: number) => void,\n}\n\nconst getActualValue = (value: string | number, type: RangeSliderTypes, max: number, min: number, decimalPlaces: number) => {\n  switch (type) {\n    case RangeSliderTypes.LINEAR:\n      return toDecimalPlaces(Number(value), decimalPlaces)\n    case RangeSliderTypes.LOG:\n      return toDecimalPlaces(logScale(Number(value), max, min), decimalPlaces)\n  }\n}\n\nconst handleChange = (type: RangeSliderTypes, setValue: (value: number) => void, decimalPlaces: number, max: number, min: number) => (e: ChangeEvent<HTMLInputElement>) => {\n  setValue(getActualValue(e.target.value, type, max, min, decimalPlaces));\n}\n\nconst handleBlur = (type: RangeSliderTypes, setValue: (value: number) => void, max: number, min: number, decimalPlaces: number) => (e: FocusEvent<HTMLInputElement>) => {\n  setValue(getActualValue(e.target.value, type, max, min, decimalPlaces));\n}\n\nexport const RangeSlider: FC<Props> = (\n  {\n    setValue,\n    type = RangeSliderTypes.LINEAR,\n    showTabTop = false,\n    showTabBottom = false,\n    step = 1,\n    min = 0,\n    max = 100,\n    value = 0,\n    decimalPlaces = 3,\n    ...rest\n  }) => {\n  const [left, setLeft] = useState<number | null>(null);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if(!showTabTop && !showTabBottom) return;\n    if(!containerRef || containerRef.current === null) return;\n    const normalisedValue = (getValue(type, value, max, min) - getMin(type, min)) / (getMax(type, max) - getMin(type, min));\n    console.log('norm', normalisedValue);\n    setLeft((normalisedValue * (containerRef.current.clientWidth - 8)) + 4)\n  }, [value, containerRef]);\n  return (\n    <div className={styles.rangeSlider_wrapper} ref={containerRef}>\n      {showTabTop && <span\n        className={[styles.rangeSlider_tab, styles.rangeSlider_tabTop].join(' ')}\n        style={{left: `${left}px`}}\n      >{value}</span>}\n      <input\n        type=\"range\"\n        className={styles.rangeSlider}\n        onChange={handleChange(type, setValue, decimalPlaces, max, min)}\n        onBlur={handleBlur(type, setValue, max, min, decimalPlaces)}\n        value={getValue(type, value, max, min).toFixed(decimalPlaces)}\n        min={getMin(type, min)}\n        max={getMax(type, max)}\n        step={step}\n        {...rest}\n      />\n      {showTabBottom && <span\n        className={styles.rangeSlider_tab}\n        style={{left: `${left}px`}}\n      >{value}</span>}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { RangeSlider, RangeSliderTypes } from 'orderandchaos-react-range-slider'\nimport 'orderandchaos-react-range-slider/dist/index.css'\nimport { ContainerFullWidth, Row, Column, styles } from '@orderandchaos/react-components-typescript'\n\nconst App = () => {\n  const [linearValue, setLinearValue] = useState<number>(0)\n  const [logValue, setLogValue] = useState<number>(100)\n  return (\n    <ContainerFullWidth className={styles.bc_lighterGrey}>\n      <Row>\n        <Column columnClass={styles.col6}>\n          <input readOnly={true} value={linearValue}/>\n          <RangeSlider value={linearValue} setValue={setLinearValue} min={-100} max={100} step={0.1} showTabBottom={true}/>\n        </Column>\n        <Column columnClass={styles.col6}>\n          <input readOnly={true} value={logValue}/>\n          <RangeSlider value={logValue} setValue={setLogValue} type={RangeSliderTypes.LOG} min={100} max={100000} decimalPlaces={0} showTabBottom={true}/>\n        </Column>\n      </Row>\n    </ContainerFullWidth>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}